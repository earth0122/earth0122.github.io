
@{
    ViewData["Title"] = "RazorStatement";


    string ScoreComment(int score)
    {
        string comment = "";

        switch (score)
        {
            case int s when s <= 60:
                comment = $"{s}分：成績不及格!";
                break;
            case int s when s >= 60 && s < 85:
                comment = $"{score}分：成績及格，分數尚可.";
                break;
            case int s when s >= 85 && s < 95:
                comment = $"{score}分：成績及格，分數中上.";
                break;
            default:
                comment = $"{score}分：成績及格，分數優異！";
                break;
        }

        return comment;
    };


    string PortFunction(int port) =>
       port switch
       {
           80 => $"{port}, 這是HTTP使用的Port號碼",
           110 => $"{port}, 這是POP3使用的Port號碼",
           143 => $"{port}, 這是IMAP使用的Port號碼",
           443 => $"{port}, 這是HTTPS使用的Port號碼",
           587 => $"{port}, 這是SMTP使用的Port號碼",
           _ => $"{port}, 這裡沒有記載這個Port號碼的用途"
       };
}

<div class="h-100 p-3 bg-info rounded-3">
    <h2>Razor陳述式--條件判斷及迴圈</h2>
</div>

<!--1. if...else if .. else條件判斷式-->
<div class="alert alert-info">1. if...else if .. else條件判斷式</div>
@{
    var score = 95;
}

@if (score < 60)
{
    <p>@(score)分：成績不及格!</p>
}
else if (score >= 60 && score < 85)
{
    <p>@(score)分：成績及格，分數尚可.</p>
}
else if (score >= 85 && score < 95)
{
    <p>@(score)分：成績及格，分數中上.</p>
}
else
{
    <p>@(score)分：成績及格，分數優異！</p>
}

<div class="alert alert-danger">將上面改寫成Local Function + switch..case</div>
<h1>@ScoreComment(score)</h1>

<!--2. switch...case判斷式-->
<div class="alert alert-info">2. switch...case判斷式</div>
@{ var portNumber = 587; }

@switch (portNumber)
{
    case 80:
        <p>@portNumber，這是HTTP使用的Port號碼</p>
        break;
    case 110:
        <p>@portNumber，這是POP3使用的Port號碼</p>
        break;
    case 143:
        <p>@portNumber，這是IMAP使用的Port號碼</p>
        break;
    case 443:
        <p>@portNumber，這是HTTPS使用的Port號碼</p>
        break;
    case 587:
        <p>@portNumber，這是SMTP使用的Port號碼</p>
        break;
    default:
        <p>@portNumber，這裡沒有記載這個Port號碼的用途</p>
        break;
}

<div class="alert alert-danger">將switch..case獨立成Local Function + C# 8.0 switch</div>
<p>@PortFunction(80)</p>
<p>@PortFunction(443)</p>
<p>@PortFunction(587)</p>

<div class="alert alert-danger">將switch..case獨立成Partial View</div>

@await Html.PartialAsync("_PortFunctionPartial", ViewData["PortNumber"] = 80)

@await Html.PartialAsync("_PortFunctionPartial", ViewData["PortNumber"] = 110)

@await Html.PartialAsync("_PortFunctionPartial", ViewData["PortNumber"] = 143)



<!--宣告匿名型別陣列-->
@{
    var ports = new[]
    {
        new { portNum = 80 , description = "這是HTTP使用的Port號碼"},
        new { portNum = 110, description = "這是POP3使用的Port號碼"},
        new { portNum = 143, description = "這是IMAP使用的Port號碼"},
        new { portNum = 443, description = "這是HTTPS使用的Port號碼"},
        new { portNum = 587, description = "這是SMTP使用的Port號碼"}
    };
}


<!--3.for迴圈-->
<div class="alert alert-info">3.for迴圈</div>
<table class="table table-bordered table-striped">
    <thead class="thead-dark">
        <tr>
            <th>Port號</th>
            <th>用途說明</th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < ports.Length; i++)
        {
            <tr>
                <td>@ports[i].portNum</td>
                <td>@ports[i].description</td>
            </tr>
        }
    </tbody>
</table>

<!--4. foreach陳述式-->
<div class="alert alert-info">4. foreach陳述式</div>
<ul>
    @foreach (var p in ports)
    {
        <li>@p.portNum，@p.description</li>
    }
</ul>

<!--5. while陳述式-->
<div class="alert alert-info">5. while陳述式</div>
@{ var index = 0; }
@while (index < ports.Length)
{
    var port = ports[index];
    <p> @port.portNum, @port.description </p>
    @*@: @port.portNum, @port.description <br />*@
    index++;
}

<!--6.do...while陳述式-->
<div class="alert alert-info">6. do...while陳述式</div>

@{ var idx = 0;}
@do
{
    var port = ports[idx];
    @: @port.portNum, @port.description
    <br />
    idx++;
} while (idx < ports.Length);

<!--7.try...catch...finally陳述式-->

<div class="alert alert-info">7. try...catch...finally陳述式 </div>

@try
{
    throw new InvalidOperationException("擲出InvalidOperationException例外");
}
catch (InvalidOperationException ex)
{
    <p>捕捉到InvalidOperationException例外錯誤訊息: @ex.Message</p>
}
catch (Exception ex)
{
    <p>捕捉到Exception例外錯誤訊息: @ex.Message</p>
}
finally
{
    <p>這是最終的finally陳述式</p>
}


@*宣告自訂的CSS*@
@section topCSS{
    <style>
        div.alert {
            font-size: larger;
            font-weight: 900;
            border: 2px dashed black;
        }
    </style>
}